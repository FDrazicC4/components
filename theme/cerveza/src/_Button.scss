@import "utilities";


// ==============================================
// General
// ==============================================

.Button {
    box-sizing: border-box;
    position: relative;
    display: block;
    width: 100%;
    overflow: hidden;
    border-width: 2px;
    border-style: solid;
    border-radius: map_get($button, border_radius);
    padding: 1em;
    font-family: inherit;
    text-transform: uppercase;
    line-height: 1em;
    cursor: pointer;
    transition: all 0.3s;

    &__content {
        position: relative;
        height: 1em;
        opacity: 1;
    }
    
    &__icon {
        display: block;
        position: relative;
        font-size: 1.5em;
    }
    
    &__text {
        display: block;
    }
    
    &__loadingIndicator {
        pointer-events: none;
        opacity: 0;
        position: absolute;
        top: calc(50% + 1rem);
        left: 50%;
        transform: translate(-50%, -50%);
    }
}

.Button--isDisabled {
    opacity: 0.5;
    cursor: not-allowed;
}

// ----------------------------------------------
// responsive

@include for-tablet-portrait-up {

    .Button__wrapper {
        width: auto;
        min-width: 1em * 10;
    }

}


// ==============================================
// Colors
// ==============================================

$colors: primary, secondary, success, info, warning, danger, light, dark;

@each $color in $colors {

    .Button__wrapper.Button__color--#{$color} {

        $button_color: map_get(map_get($button, colors), $color);

        &.Button__variant--standard,
        &.Button__variant--icon,
        &.Button__variant--labeled-icon {
            background-color: $button_color;
            border-color: $button_color;

            .Button__content {
                color: set-text-color($button_color);
            }

            .Button__icon {
                fill: set-text-color($button_color);
            }

            &:hover {
                background-color: darken($button_color, 10%);
                border-color: darken($button_color, 10%);
            }

            &.Button--isDisabled {
                background-color: transparent;
                border-color: $button_color;

                .Button__content {
                    color: $button_color;
                }

            }

        }

    }

}

.Button__color--link {
    background-color: transparent;
    border-color: transparent;
    color: map_get(map_get($button, colors), link);

    &:hover {
        background-color: rgba(map_get(map_get($button, colors), link), 0.1);
    }

}


// ==============================================
// Variants
// ==============================================

// ----------------------------------------------
// icon

.Button__variant--icon {

    .Button__text {
        display: none;
    }

}


// ==============================================
// Sizes
// ==============================================

.Button__size--small { font-size: size(small); }

.Button__size--medium { font-size: size(normal); }

.Button__size--large { font-size: size(large); }


// ==============================================
// States
// ==============================================

// ----------------------------------------------
// isLoading

.Button--isLoading {

    .Button__content {
        top: -1rem;
        opacity: 0;
    }

    .Button__loadingIndicator {
        top: 50%;
        opacity: 1;
    }

}

// ----------------------------------------------
// isFluid

.Button--isFluid {
    width: 100%;
}

// ----------------------------------------------
// isCompact

.Button--isCompact {
    min-width: 0;
    padding: size(small);
}

// ----------------------------------------------
// isCircular

.Button--isCircular.Button__variant--icon {
    min-width: 0;
    border-radius: 50%;

    .Button__content {
        width: 1em;
    }

    .Button__icon {
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
    }

}
