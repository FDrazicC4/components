@use "sass:map";
@use "variables";
@use "functions";


// ==============================================
// Responsive Mixins
// ==============================================

@mixin for-tablet-portrait-up {
  @media (min-width: map_get(variables.$breakpoints, tablet-portrait)) { @content; }
}

@mixin for-tablet-landscape-up {
    @media (min-width: map_get(variables.$breakpoints, tablet-landscape)) { @content; }
}

@mixin for-desktop-only {
    @media (min-width: map_get(variables.$breakpoints, desktop)) { @content; }
}


// ==============================================
// Triangle Mixin
// ==============================================

@mixin triangle($direction, $size, $color){
    content: '';
    display: block;
    width: 0;
    height: 0;
    border-style: solid;

    @if $direction == top {
        border-width: 0 $size $size $size;
        border-color: transparent transparent $color transparent;
    }
    @if $direction == bottom{
        border-width: $size $size 0 $size;
        border-color: $color transparent transparent transparent;
    }
    @if $direction == left{
        border-width: $size $size $size 0;
        border-color: transparent $color transparent transparent;
    }
    @if $direction == right{
        border-width: $size 0 $size $size;
        border-color: transparent transparent transparent $color;
    }
}


// ==============================================
// Fetch Colors
// ==============================================

@mixin fetch-color($class-prefix1, $attribute1, $class-prefix2: null, $attribute2: null) {

    $color-variants: primary, secondary, tertiary, success, info, warning, danger, light, dark;

    $colors: (
        primary:    functions.color(brand, primary),
        secondary:  functions.color(brand, secondary),
        tertiary:   functions.color(brand, tertiary),
        success:    functions.color(accent, success),
        info:       functions.color(accent, info),
        warning:    functions.color(accent, warning),
        danger:     functions.color(accent, danger),
        light:      functions.color(accent, light),
        dark:       functions.color(accent, dark),
    );

    @each $color in $color-variants {
        // if $class-prefix was passed, inject styles underneath the generated class name
        @if $class-prefix1 {
            #{$class-prefix1}#{$color} {
                #{$attribute1}: map.get($colors, $color);

                @if $class-prefix2 {
                    #{$class-prefix2} {
                        #{$attribute2}: map.get($colors, $color);
                    }
                }
            }
        }
        // otherwise, just inject the attribute and value
        @else {
            #{$attribute1}: map.get($colors, $color);
        }
    }

}
